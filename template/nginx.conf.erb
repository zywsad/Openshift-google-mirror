server {
    listen  <%= ENV['OPENSHIFT_NGINX_IP'] %>:<%= ENV['OPENSHIFT_NGINX_PORT'] %>;
#    root    <%= ENV['OPENSHIFT_REPO_DIR'] %>public;

    # Disable all logging
    access_log /dev/null;
    error_log  /dev/null crit;

#    server_name scholar.google.com;

#    resolver 8.8.8.8;
    location / {
        set $upstream_host "www.google.com";
        set $upstream "";
        rewrite_by_lua '    

            -- load global route cache into current request scope
            -- by default vars are not shared between requests
            local routes = _G.routes

            -- setup routes cache if empty
            if routes == nil then
                routes = {}
                ngx.log(ngx.ALERT, "Route cache is empty.")
            end

            -- try cached route first
            local route = routes[ngx.var.upstream_host]
            if route == nil then
                os.execute("perl /var/lib/openshift/<%= ENV['OPENSHIFT_APP_UUID'] %>/nginx/usr/versions/0.0.1/Perl-DNS-Resolver/get_host_ip.pl " .. ngx.var.upstream_host .. " > /tmp/ip.out")
                io.input("/tmp/ip.out")
                route = io.read("*line")
            end

            -- fallback to get_host_ip for lookups
            if route ~= nil then
                -- ngx.log(ngx.ALERT, route)
                -- ngx.var.upstream_host = route
                -- route[ngx.var.http_host] = route
                ngx.var.upstream = route
                routes[ngx.var.upstream_host] = route
                _G.routes = routes
            else
                ngx.exit(ngx.HTTP_NOT_FOUND)
            end

        ';
#       index  index.html index.htm;
#        google on;
#	google_scholar on;
        proxy_buffering             off;
        proxy_set_header            Host $upstream_host;
#        proxy_set_header            X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_redirect              off;
#        proxy_connect_timeout       10;
#        proxy_send_timeout          30;
#        proxy_read_timeout          30;
        proxy_pass https://$upstream;
    }
}
